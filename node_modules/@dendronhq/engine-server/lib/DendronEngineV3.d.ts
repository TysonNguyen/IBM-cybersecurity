import { BulkResp, DEngine, DEngineClient, DEngineDeleteSchemaResp, DEngineInitResp, DEngineMode, DHookDict, DLink, DStore, DVault, EngineInfoResp, FindNoteOpts, FuseEngine, GetAnchorsRequest, GetDecorationsPayload, GetLinksRequest, GetNoteAnchorsPayload, GetNoteBlocksPayload, GetNoteLinksPayload, IFileStore, INoteStore, IntermediateDendronConfig, NoteChangeEntry, NoteProps, NotePropsByFnameDict, NotePropsByIdDict, NotePropsMeta, Optional, RenameNotePayload, RenderNotePayload, RespV2, SchemaModuleDict, SchemaModuleProps, SchemaQueryResp, UpdateNoteResp, WorkspaceOpts, WriteNoteResp } from "@dendronhq/common-all";
import { DLogger } from "@dendronhq/common-server";
declare type DendronEngineOptsV3 = {
    wsRoot: string;
    vaults: DVault[];
    fileStore: IFileStore;
    noteStore: INoteStore<string>;
    forceNew?: boolean;
    mode?: DEngineMode;
    logger?: DLogger;
    config: IntermediateDendronConfig;
};
declare type DendronEnginePropsV3 = Required<DendronEngineOptsV3>;
export declare class DendronEngineV3 implements DEngine {
    wsRoot: string;
    store: DStore;
    protected props: DendronEnginePropsV3;
    logger: DLogger;
    fuseEngine: FuseEngine;
    links: DLink[];
    configRoot: string;
    config: IntermediateDendronConfig;
    hooks: DHookDict;
    private _vaults;
    private _fileStore;
    private _noteStore;
    static _instance: DendronEngineV3 | undefined;
    constructor(props: DendronEnginePropsV3);
    static create({ wsRoot, logger }: {
        logger?: DLogger;
        wsRoot: string;
    }): DendronEngineV3;
    static instance({ wsRoot }: {
        wsRoot: string;
    }): DendronEngineV3;
    /**
     * @deprecated
     * For accessing a specific note by id, see {@link DendronEngineV3.getNote}.
     * If you need all notes, avoid modifying any note as this will cause unintended changes on the store side
     */
    get notes(): NotePropsByIdDict;
    /**
     * @deprecated see {@link DendronEngineV3.findNotes}
     */
    get noteFnames(): NotePropsByFnameDict;
    get schemas(): SchemaModuleDict;
    get vaults(): DVault[];
    set vaults(vaults: DVault[]);
    /**
     * Does not throw error but returns it
     */
    init(): Promise<DEngineInitResp>;
    /**
     * See {@link DEngine.getNote}
     */
    getNote(id: string): Promise<NoteProps | undefined>;
    /**
     * See {@link DEngine.findNotes}
     */
    findNotes(opts: FindNoteOpts): Promise<NoteProps[]>;
    /**
     * See {@link DEngine.findNotesMeta}
     */
    findNotesMeta(opts: FindNoteOpts): Promise<NotePropsMeta[]>;
    bulkWriteNotes(): Promise<Required<BulkResp<NoteChangeEntry[]>>>;
    deleteNote(): ReturnType<DEngineClient["deleteNote"]>;
    deleteSchema(): Promise<DEngineDeleteSchemaResp>;
    getConfig(): Promise<{
        error: null;
        data: any;
    }>;
    getSchema(): Promise<RespV2<SchemaModuleProps>>;
    info(): Promise<RespV2<EngineInfoResp>>;
    queryNotesSync(): ReturnType<DEngineClient["queryNotesSync"]>;
    querySchema(): Promise<SchemaQueryResp>;
    queryNotes(): ReturnType<DEngineClient["queryNotes"]>;
    renderNote(): Promise<RespV2<RenderNotePayload>>;
    sync(): Promise<never>;
    refreshNotes(): Promise<RespV2<void>>;
    renameNote(): Promise<RespV2<RenameNotePayload>>;
    updateNote(): Promise<UpdateNoteResp>;
    updateSchema(): Promise<void>;
    writeConfig(): ReturnType<DEngine["writeConfig"]>;
    addAccessTokensToPodConfig(): Promise<void>;
    writeNote(): Promise<WriteNoteResp>;
    writeSchema(): Promise<void>;
    getNoteBlocks(): Promise<GetNoteBlocksPayload>;
    getDecorations(): Promise<GetDecorationsPayload>;
    /**
     * TODO: Fix backlinks not being updated when adding new reference to another note or renaming old reference
     */
    getLinks(opts: Optional<GetLinksRequest, "ws">): Promise<GetNoteLinksPayload>;
    getAnchors(opts: GetAnchorsRequest): Promise<GetNoteAnchorsPayload>;
    /**
     * Construct dictionary of NoteProps from workspace on filesystem
     *
     * For every vault on the filesystem, get list of files and convert each file to NoteProp
     * @returns NotePropsByIdDict
     */
    private initNotes;
    /**
     * Create and add backlinks from all notes with a link pointing to another note
     */
    private addBacklinks;
}
export declare const createEngineV3: ({ wsRoot }: WorkspaceOpts) => DEngineClient;
export {};
