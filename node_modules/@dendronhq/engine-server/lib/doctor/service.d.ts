import { DendronError, DEngineClient, Disposable, DLink, DVault, NoteDicts, NoteProps } from "@dendronhq/common-all";
import { createDisposableLogger } from "@dendronhq/common-server";
export declare enum DoctorActionsEnum {
    FIX_FRONTMATTER = "fixFrontmatter",
    H1_TO_TITLE = "h1ToTitle",
    HI_TO_H2 = "h1ToH2",
    REMOVE_STUBS = "removeStubs",
    CREATE_MISSING_LINKED_NOTES = "createMissingLinkedNotes",
    REGENERATE_NOTE_ID = "regenerateNoteId",
    FIND_BROKEN_LINKS = "findBrokenLinks",
    FIX_REMOTE_VAULTS = "fixRemoteVaults",
    FIX_AIRTABLE_METADATA = "fixAirtableMetadata",
    ADD_MISSING_DEFAULT_CONFIGS = "addMissingDefaultConfigs",
    REMOVE_DEPRECATED_CONFIGS = "removeDeprecatedConfigs",
    FIX_SELF_CONTAINED_VAULT_CONFIG = "fixSelfContainedVaultsInConfig"
}
export declare type DoctorServiceOpts = {
    action: DoctorActionsEnum;
    query?: string;
    candidates?: NoteProps[];
    limit?: number;
    dryRun?: boolean;
    exit?: boolean;
    quiet?: boolean;
    engine: DEngineClient;
    podId?: string;
    hierarchy?: string;
    vault?: DVault | string;
};
/** DoctorService is a disposable, you **must** dispose instances you create
 * otherwise you risk leaking file descriptors which may lead to crashes. */
export declare class DoctorService implements Disposable {
    L: ReturnType<typeof createDisposableLogger>["logger"];
    private loggerDispose;
    constructor();
    dispose(): void;
    findBrokenLinks(note: NoteProps, noteDicts: NoteDicts, engine: DEngineClient): DLink[];
    getBrokenLinkDestinations(notes: NoteProps[], engine: DEngineClient): NoteProps[];
    findMisconfiguredSelfContainedVaults(wsRoot: string, vaults: DVault[]): Promise<DVault[]>;
    executeDoctorActions(opts: DoctorServiceOpts): Promise<{
        exit: boolean;
        error: DendronError<import("@dendronhq/common-all").StatusCodes | undefined>;
        resp?: undefined;
    } | {
        exit: boolean;
        error?: undefined;
        resp?: undefined;
    } | {
        exit: boolean;
        resp: any;
        error?: undefined;
    }>;
    /** Returns the path for the backup if it was able to create one, or a DendronError if one occurred during backup. */
    createBackup(wsRoot: string, backupInfix: string): Promise<string | DendronError>;
}
