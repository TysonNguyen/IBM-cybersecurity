import { DEngineClient, DStore, DVault, IDendronError, NoteProps, NotePropsByIdDict, NoteDicts, NotesCacheEntryMap, NoteChangeEntry } from "@dendronhq/common-all";
import { DLogger } from "@dendronhq/common-server";
import { ParserBase } from "./parseBase";
import { NotesFileSystemCache } from "../../cache/notesFileSystemCache";
export declare type FileMeta = {
    prefix: string;
    fpath: string;
};
export declare type FileMetaDict = {
    [key: string]: FileMeta[];
};
export declare class NoteParser extends ParserBase {
    opts: {
        store: DStore;
        cache: NotesFileSystemCache;
        engine: DEngineClient;
        logger: DLogger;
        maxNoteLength: number;
    };
    cache: NotesFileSystemCache;
    private engine;
    private maxNoteLength;
    constructor(opts: {
        store: DStore;
        cache: NotesFileSystemCache;
        engine: DEngineClient;
        logger: DLogger;
        maxNoteLength: number;
    });
    parseFiles(allPaths: string[], vault: DVault): Promise<{
        notesById: NotePropsByIdDict;
        cacheUpdates: NotesCacheEntryMap;
        errors: IDendronError[];
    }>;
    /**
     *
     * @param opts
     * @returns List of all notes added. If a note has no direct parents, stub notes are added instead
     */
    parseNoteProps(opts: {
        fileMeta: FileMeta;
        noteDicts?: NoteDicts;
        parents?: NoteProps[];
        addParent: boolean;
        createStubs?: boolean;
        vault: DVault;
        errors: IDendronError[];
    }): {
        changeEntries: NoteChangeEntry[];
        noteHash: string;
        matchHash: boolean;
    };
    private file2NoteWithCache;
    private updateLinksAndAnchors;
}
