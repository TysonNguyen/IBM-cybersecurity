import { NotePropsDict, NoteProps } from "../types";
export declare enum TreeMenuNodeIcon {
    bookOutlined = "bookOutlined",
    numberOutlined = "numberOutlined",
    plusOutlined = "plusOutlined"
}
export declare type TreeMenuNode = {
    key: string;
    title: string;
    icon: TreeMenuNodeIcon | null;
    hasTitleNumberOutlined: boolean;
    vaultName: string;
    navExclude: boolean;
    children?: TreeMenuNode[];
};
export declare type TreeMenu = {
    roots: TreeMenuNode[];
    child2parent: {
        [key: string]: string | null;
    };
};
export declare enum TreeViewItemLabelTypeEnum {
    title = "title",
    filename = "filename"
}
export declare class TreeUtils {
    static generateTreeData(allNotes: NotePropsDict, domains: NoteProps[]): TreeMenu;
    static getAllParents: ({ child2parent, noteId, }: {
        child2parent: {
            [key: string]: string | null;
        };
        noteId: string;
    }) => string[];
    static note2Tree({ noteId, noteDict, }: {
        noteId: string;
        noteDict: NotePropsDict;
    }): TreeMenuNode | undefined;
    static sortNotesAtLevel: ({ noteIds, noteDict, reverse, labelType, }: {
        noteIds: string[];
        noteDict: NotePropsDict;
        reverse?: boolean | undefined;
        labelType?: TreeViewItemLabelTypeEnum | undefined;
    }) => string[];
}
