"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitUtils = exports.SimpleGitResetMode = exports.simpleGit = void 0;
const common_all_1 = require("@dendronhq/common-all");
const execa_1 = __importDefault(require("execa"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const simple_git_1 = __importStar(require("simple-git"));
exports.simpleGit = simple_git_1.default;
Object.defineProperty(exports, "SimpleGitResetMode", { enumerable: true, get: function () { return simple_git_1.ResetMode; } });
const url_1 = require("url");
const _1 = require(".");
const filesv2_1 = require("./filesv2");
const formatString = (opts) => {
    const { txt, note } = opts;
    lodash_1.default.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
    const noteHierarchy = note.fname.replace(/\./g, "/");
    return lodash_1.default.template(txt)({ noteHierarchy });
};
/**
 *  NOTICE: Lots of the Git code is obtained from https://github.com/KnisterPeter/vscode-github, licened under MIT
 */
/**
 * Utilities for working with git urls
 */
class GitUtils {
    static canShowGitLink(opts) {
        const { config, note } = opts;
        if (lodash_1.default.isBoolean((note.custom || {})[common_all_1.RESERVED_KEYS.GIT_NO_LINK]) &&
            note.custom[common_all_1.RESERVED_KEYS.GIT_NO_LINK]) {
            return false;
        }
        const githubConfig = common_all_1.ConfigUtils.getGithubConfig(config);
        return lodash_1.default.every([
            githubConfig.enableEditLink,
            githubConfig.editLinkText,
            githubConfig.editRepository,
            githubConfig.editBranch,
            githubConfig.editViewMode,
        ]);
    }
    /**
     * Convert a github repo orul to access token format
     */
    static getGithubAccessTokenUrl(opts) {
        const { remotePath, accessToken } = opts;
        let repoPath;
        if (remotePath.startsWith("https://")) {
            repoPath = remotePath.split("/").slice(-2).join("/");
        }
        else {
            repoPath = opts.remotePath.split(":").slice(-1)[0];
        }
        return `https://${accessToken}:x-oauth-basic@github.com/${repoPath}`;
    }
    static git2Github(gitUrl) {
        // 'git@github.com:kevinslin/dendron-vault.git'
        // @ts-ignore
        const [_, userAndRepo] = gitUrl.split(":");
        const [user, repo] = userAndRepo.split("/");
        return `https://github.com/${user}/${path_1.default.basename(repo, ".git")}`;
    }
    static getGithubEditUrl(opts) {
        const { note, config, wsRoot } = opts;
        const vault = note.vault;
        const vaults = common_all_1.ConfigUtils.getVaults(config);
        const mvault = common_all_1.VaultUtils.matchVault({ wsRoot, vault, vaults });
        const vaultUrl = lodash_1.default.get(mvault, "remote.url", false);
        const githubConfig = common_all_1.ConfigUtils.getGithubConfig(config);
        const gitRepoUrl = githubConfig.editRepository;
        // if we have a vault, we don't need to include the vault name as an offset
        if (mvault && vaultUrl) {
            return lodash_1.default.join([
                this.git2Github(vaultUrl),
                githubConfig.editViewMode,
                githubConfig.editBranch,
                note.fname + ".md",
            ], "/");
        }
        let gitNotePath = lodash_1.default.join([path_1.default.basename(vault.fsPath), note.fname + ".md"], "/");
        if (lodash_1.default.has(note === null || note === void 0 ? void 0 : note.custom, common_all_1.RESERVED_KEYS.GIT_NOTE_PATH)) {
            gitNotePath = formatString({
                txt: note.custom[common_all_1.RESERVED_KEYS.GIT_NOTE_PATH],
                note,
            });
        }
        // this assumes we have a workspace url
        return lodash_1.default.join([
            gitRepoUrl,
            githubConfig.editViewMode,
            githubConfig.editBranch,
            gitNotePath,
        ], "/");
    }
    static getOwnerAndRepoFromURL(url) {
        const [owner, repo] = url.split("/").slice(-2);
        return { owner, repo };
    }
    static getRepoNameFromURL(url) {
        return path_1.default.basename(url, ".git");
    }
    /** Find the dependency path for a vault given the remote url. You can use
     * this even if the vault has no remote.
     *
     * This is the relative path within the dependencies folder, like
     * `github.com/dendronhq/dendron-site`. For more details see the
     * [[Self Contained Vaults RFC|dendron://dendron.docs/rfc.42-self-contained-vaults]]
     */
    static remoteUrlToDependencyPath({ vaultName, url, }) {
        var _a, _b, _c, _d;
        // If no remote URL exists, then it's a local vault. We keep these in a
        // local-only folder.
        if (url === undefined)
            return common_all_1.FOLDERS.LOCAL_DEPENDENCY;
        // Check if it matches any web URLs like
        // https://github.com/dendronhq/dendron-site.git This may also look like
        // http://example.com:8000/dendronhq/dendron-site.git, we skip the port
        const webMatch = 
        // starts with http:// or https://
        // followed by the domain, which will continue until we hit /
        // if we see a port definition like :8000, we skip it for simplicity
        // then we have the path of the URL, like dendronhq/dendron-site
        // finally, if there's a `.git` we'll discard that for a cleaner name
        /^(https?:\/\/)(?<domain>[^/:]+)(:[0-9]+)?\/(?<path>.+?)(\.git)?$/.exec(url);
        if (((_a = webMatch === null || webMatch === void 0 ? void 0 : webMatch.groups) === null || _a === void 0 ? void 0 : _a.domain) && ((_b = webMatch === null || webMatch === void 0 ? void 0 : webMatch.groups) === null || _b === void 0 ? void 0 : _b.path)) {
            // matched a HTTP/S git remote
            return path_1.default.join(webMatch.groups.domain, 
            // Normalize for Windows so forward slashes are converted to backward ones
            path_1.default.normalize(webMatch.groups.path));
        }
        // Check if it matches any SSH URLs like
        // git@github.com:dendronhq/dendron-site.git This may also look like
        // git@example.com:220/dendronhq/dendron-site.git, we skip the port and the
        const sshMatch = 
        // SSH urls start with a user, like git@ or gitlab@, which we skip
        // followed by the domain, which will continue until we hit :
        // if we see a port definition like :8000, we skip it for simplicity
        // then we have the path of the URL, like dendronhq/dendron-site
        // this path may optionally begin with a /, which we'll skip
        // finally, if there's a `.git` we'll discard that for a cleaner name
        /^([^@]+@)(?<domain>[^:/]+):([0-9]+\/)?\/?(?<path>.+?)(\.git)?$/.exec(url);
        if (((_c = sshMatch === null || sshMatch === void 0 ? void 0 : sshMatch.groups) === null || _c === void 0 ? void 0 : _c.domain) && ((_d = sshMatch === null || sshMatch === void 0 ? void 0 : sshMatch.groups) === null || _d === void 0 ? void 0 : _d.path)) {
            // matched a HTTP/S git remote
            return path_1.default.join(sshMatch.groups.domain, 
            // Normalize for Windows so forward slashes are converted to backward ones
            path_1.default.normalize(sshMatch.groups.path));
        }
        // If none of these worked, try to make a fallback path. This may be because
        // the remote points to a local directory, or because it's something we
        // didn't expect.
        const fallback = lodash_1.default.findLast(url.split(/[/\\]/), (part) => part.length > 0);
        if (fallback)
            return fallback;
        // Fallback for the fallback: if all else fails, just use the vault name
        return vaultName;
    }
    /** If this vault had this remote, what path should it be stored under?
     *
     * If the remote is null, then you'll get the path should be if the vault was a local vault.
     */
    static getDependencyPathWithRemote({ vault, remote, }) {
        var _a, _b;
        const vaultName = (_b = (_a = vault.name) !== null && _a !== void 0 ? _a : 
        // if the vault has no name, compute one based on the path
        lodash_1.default.findLast(vault.fsPath.split(/[/\\]/), (part) => part.length > 0)) !== null && _b !== void 0 ? _b : 
        // Fall back to fsPath directly if the calculation fails
        vault.fsPath;
        if (!remote) {
            // local
            return path_1.default.join(common_all_1.FOLDERS.DEPENDENCIES, common_all_1.FOLDERS.LOCAL_DEPENDENCY, vaultName);
        }
        else {
            return path_1.default.join(common_all_1.FOLDERS.DEPENDENCIES, GitUtils.remoteUrlToDependencyPath({
                vaultName,
                url: remote,
            }));
        }
    }
    static getVaultFromRepo(opts) {
        const { repoPath, wsRoot } = opts;
        return {
            fsPath: path_1.default.relative(wsRoot, repoPath),
            remote: { type: "git", url: opts.repoUrl },
        };
    }
    static async getVaultsFromRepo(opts) {
        const { repoPath, wsRoot, repoUrl } = opts;
        // is workspace root
        if (
        // Has a config file
        (await fs_extra_1.default.pathExists(path_1.default.join(repoPath, common_all_1.CONSTANTS.DENDRON_CONFIG_FILE))) &&
            // But is not a self-contained vault
            !(await fs_extra_1.default.pathExists(path_1.default.join(repoPath, common_all_1.FOLDERS.NOTES)))) {
            const config = (await (0, _1.readYAMLAsync)(path_1.default.join(repoPath, common_all_1.CONSTANTS.DENDRON_CONFIG_FILE)));
            const workspace = path_1.default.basename(repoPath);
            const vaultsConfig = common_all_1.ConfigUtils.getVaults(config);
            const vaults = vaultsConfig.map((ent) => {
                const vpath = (0, filesv2_1.vault2Path)({ vault: ent, wsRoot: repoPath });
                return {
                    ...ent,
                    workspace,
                    fsPath: path_1.default.relative(path_1.default.join(wsRoot, workspace), vpath),
                };
            });
            return {
                workspace: {
                    name: workspace,
                    vaults,
                    remote: {
                        type: "git",
                        url: repoUrl,
                    },
                },
                vaults,
            };
        }
        else {
            const vault = {
                fsPath: path_1.default.relative(wsRoot, repoPath),
                remote: { type: "git", url: opts.repoUrl },
            };
            if (await fs_extra_1.default.pathExists(path_1.default.join(repoPath, common_all_1.FOLDERS.NOTES))) {
                vault.selfContained = true;
            }
            return {
                vaults: [vault],
            };
        }
    }
    static isRepo(src) {
        return fs_extra_1.default.existsSync(src) && fs_extra_1.default.existsSync(path_1.default.join(src, ".git"));
    }
    static async getGitRoot(uri) {
        try {
            const response = await this.execute("git rev-parse --show-toplevel", uri);
            return response.stdout.trim();
        }
        catch (err) {
            // Not in a git repository
            if (err.failed)
                return undefined;
            throw err;
        }
    }
    static async getGithubFileUrl(uri, file, line = 0, endLine = 0) {
        const hostname = await this.getGitHostname(uri);
        const [owner, repo] = await this.getGitProviderOwnerAndRepository(uri);
        const branch = await this.getCurrentBranch(uri);
        const currentFile = file.replace(/^\//, "").replace(/^\\/, "");
        return `https://${hostname}/${owner}/${repo}/blob/${branch}/${currentFile}#L${line + 1}:L${endLine + 1}`;
    }
    static async getGitHostname(uri) {
        return (await this.getGitProviderOwnerAndRepositoryFromGitConfig(uri))[1];
    }
    /**
     * Looks at URI for git repo
     * @param uri
     * @returns
     */
    static async getGitProviderOwnerAndRepositoryFromGitConfig(uri) {
        const remoteName = await this.getRemoteName(uri);
        try {
            const remote = (await this.execute(`git config --local --get remote.${remoteName}.url`, uri)).stdout.trim();
            if (!remote.length) {
                throw new Error("Git remote is empty!");
            }
            return this.parseGitUrl(remote);
        }
        catch (e) {
            const remotes = await this.getRemoteNames(uri);
            if (!remotes.includes(remoteName)) {
                throw new common_all_1.DendronError({
                    message: `Your configuration contains an invalid remoteName. You should probably use one of these:\n ${remotes.join("\n")}`,
                });
            }
            throw e;
        }
    }
    static async getRemoteName(uri) {
        const remoteName = await this.calculateRemoteName(uri);
        if (remoteName) {
            return remoteName;
        }
        // fallback to origin which is a sane default
        return "origin";
    }
    static async calculateRemoteName(uri) {
        const ref = (await this.execute(`git symbolic-ref -q HEAD`, uri)).stdout.trim();
        const upstreamName = (await this.execute(`git for-each-ref --format='%(upstream)' '${ref}'`, uri)).stdout.trim();
        const match = upstreamName.match(/refs\/remotes\/([^/]+)\/.*/);
        if (match) {
            return match[1];
        }
        return undefined;
    }
    static parseGitUrl(remote) {
        // git protocol remotes, may be git@github:username/repo.git
        // or git://github/user/repo.git, domain names are not case-sensetive
        if (remote.startsWith("git@") || remote.startsWith("git://")) {
            return this.parseGitProviderUrl(remote);
        }
        return this.getGitProviderOwnerAndRepositoryFromHttpUrl(remote);
    }
    static parseGitProviderUrl(remote) {
        const match = new RegExp("^git(?:@|://)([^:/]+)(?::|:/|/)([^/]+)/(.+?)(?:.git)?$", "i").exec(remote);
        if (!match) {
            throw new Error(`'${remote}' does not seem to be a valid git provider url.`);
        }
        return ["git:", ...match.slice(1, 4)];
    }
    static getGitProviderOwnerAndRepositoryFromHttpUrl(remote) {
        // it must be http or https based remote
        const { protocol = "https:", hostname, pathname } = (0, url_1.parse)(remote);
        if (!protocol) {
            throw Error("impossible");
        }
        // domain names are not case-sensetive
        if (!hostname || !pathname) {
            throw new Error("Not a Provider remote!");
        }
        const match = pathname.match(/\/(.*?)\/(.*?)(?:.git)?$/);
        if (!match) {
            throw new Error("Not a Provider remote!");
        }
        return [protocol, hostname, ...match.slice(1, 3)];
    }
    static async getRemoteNames(uri) {
        const remotes = (await this.execute(`git config --local --get-regexp "^remote.*.url"`, uri)).stdout.trim();
        return remotes
            .split("\n")
            .map((line) => new RegExp("^remote.([^.]+).url.*").exec(line))
            .map((match) => match && match[1])
            .filter((name) => Boolean(name));
    }
    static async getGitProviderOwnerAndRepository(uri) {
        return (await this.getGitProviderOwnerAndRepositoryFromGitConfig(uri)).slice(2, 4);
    }
    static async getCurrentBranch(uri) {
        const stdout = (await this.execute("git branch", uri)).stdout;
        const match = stdout.match(/^\* (.*)$/m);
        return match ? match[1] : undefined;
    }
    static async execute(cmd, uri) {
        const [git, ...args] = cmd.split(" ");
        return (0, execa_1.default)(git, args, { cwd: uri });
    }
    /** Add a file or folder to the gitignore, avoiding creating exact duplicate lines.
     *
     * Creates the gitignore file if missing.
     *
     * @param addPath The path to add to the gitignore
     * @param root The root folder containing the `.gitignore` file.
     * @param noCreateIfMissing If true, `.gitignore` won't be created if it is missing
     */
    static async addToGitignore({ addPath, root, noCreateIfMissing, }) {
        const gitignore = path_1.default.join(root, ".gitignore");
        let contents;
        try {
            contents = await fs_extra_1.default.readFile(gitignore, { encoding: "utf-8" });
        }
        catch (err) {
            // if the .gitignore was missing, ignore it
            if ((err === null || err === void 0 ? void 0 : err.code) !== "ENOENT")
                throw err;
        }
        // gitignore is missing but we are allowed to create it
        const shouldCreate = contents === undefined && !noCreateIfMissing;
        // gitignore exists, and the path is not in it yet
        // Avoid duplicating the gitignore line if it was already there
        const pathExists = contents !== undefined &&
            contents.match(new RegExp(`^${lodash_1.default.escapeRegExp(addPath)}/?$`, "m"));
        if (shouldCreate || !pathExists) {
            await fs_extra_1.default.appendFile(gitignore, `\n${addPath}`);
        }
    }
    /** Remove a file or folder from the gitignore.
     *
     * Does nothing if the gitignore is missing, or if the file or folder wasn't already in it.
     *
     * @param removePath The path to remove from the gitignore
     * @param root The root folder containing the `.gitignore` file.
     */
    static async removeFromGitignore({ removePath, root, }) {
        try {
            const gitignore = path_1.default.join(root, ".gitignore");
            const contents = await fs_extra_1.default.readFile(gitignore, { encoding: "utf-8" });
            const newContents = contents.replace(new RegExp(`^${lodash_1.default.escapeRegExp(removePath)}/?$`, "m"), "");
            if (newContents !== contents)
                await fs_extra_1.default.writeFile(gitignore, newContents);
        }
        catch (err) {
            // Ignore it if the `.gitignore` was missing
            if ((err === null || err === void 0 ? void 0 : err.code) !== "ENOENT")
                throw err;
        }
    }
}
exports.GitUtils = GitUtils;
//# sourceMappingURL=git.js.map